# --- Namespace guard (noop if already exists)
apiVersion: v1
kind: Namespace
metadata:
  name: openstack
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: neutron-ovn-confgen
  namespace: openstack
  labels:
    app.kubernetes.io/name: neutron-ovn-confgen
    application: neutron
---
# RBAC: read services/endpoints, write configmaps
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: neutron-ovn-confgen
  namespace: openstack
rules:
  - apiGroups: [""]
    resources: ["services","endpoints","endpointslices","configmaps"]
    verbs: ["get","list","watch","create","update","patch"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get","list","watch","patch","update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: neutron-ovn-confgen
  namespace: openstack
subjects:
  - kind: ServiceAccount
    name: neutron-ovn-confgen
    namespace: openstack
roleRef:
  kind: Role
  name: neutron-ovn-confgen
  apiGroup: rbac.authorization.k8s.io
---
# Empty CM that will be (re)filled by the Job
apiVersion: v1
kind: ConfigMap
metadata:
  name: neutron-ovn-conn
  namespace: openstack
  labels:
    app.kubernetes.io/name: neutron-ovn-confgen
    application: neutron
data: {}
---
# The Job that discovers NB/SB and writes ml2 snippet into the CM
apiVersion: batch/v1
kind: Job
metadata:
  name: neutron-ovn-confgen
  namespace: openstack
  annotations:
    # Ensure this runs before neutronâ€™s sync-wave 40
    argocd.argoproj.io/sync-wave: "35"
  labels:
    app.kubernetes.io/name: neutron-ovn-confgen
    application: neutron
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: neutron-ovn-confgen
        application: neutron
    spec:
      serviceAccountName: neutron-ovn-confgen
      restartPolicy: OnFailure
      containers:
        - name: confgen
          image: bitnami/kubectl:1.30
          command: ["/bin/sh","-c"]
          args:
            - |
              set -euo pipefail

              ns="openstack"
              nb_svc="ovn-ovsdb-nb"
              sb_svc="ovn-ovsdb-sb"

              nb_ip=$(kubectl -n "$ns" get svc "$nb_svc" -o jsonpath='{.spec.clusterIP}')
              sb_ip=$(kubectl -n "$ns" get svc "$sb_svc" -o jsonpath='{.spec.clusterIP}')

              # Prefer tls ports if exposed, else tcp
              nb_port=$(kubectl -n "$ns" get endpoints "$nb_svc" -o jsonpath='{range .subsets[*].ports[*]}{.port}{" "}{end}' | tr ' ' '\n' | grep -E '^(6641|6643)$' | head -n1)
              sb_port=$(kubectl -n "$ns" get endpoints "$sb_svc" -o jsonpath='{range .subsets[*].ports[*]}{.port}{" "}{end}' | tr ' ' '\n' | grep -E '^(6642|6644)$' | head -n1)

              # Fallbacks
              nb_port=${nb_port:-6641}
              sb_port=${sb_port:-6642}

              proto="tcp"
              [ "$nb_port" = "6643" ] && proto="ssl"
              [ "$sb_port" = "6644" ] && proto="ssl"

              ovn_nb="${proto}:${nb_ip}:${nb_port}"
              ovn_sb="${proto}:${sb_ip}:${sb_port}"

              # Render ML2 OVN snippet (ini)
              cat > /tmp/10-ovn-connections.ini <<EOF
[ovn]
ovn_nb_connection = ${ovn_nb}
ovn_sb_connection = ${ovn_sb}
neutron_sync_mode = repair
EOF

              # Patch/create the ConfigMap
              kubectl -n "$ns" create configmap neutron-ovn-conn --from-file=10-ovn-connections.ini=/tmp/10-ovn-connections.ini --dry-run=client -o yaml \
              | kubectl -n "$ns" apply -f -

              # Optionally, bounce neutron-server to pick up the snippet on first rollout
              # (comment out if you rely on Argo rolling anyway)
              kubectl -n "$ns" rollout restart deploy/neutron-server || true
---
# Patch neutron-server to mount the CM and copy the snippet before start
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neutron-server
  namespace: openstack
  annotations:
    argocd.argoproj.io/sync-wave: "38"
spec:
  template:
    spec:
      volumes:
        - name: neutron-ovn-conn
          configMap:
            name: neutron-ovn-conn
            optional: true
      initContainers:
        - name: inject-ovn-conn
          image: busybox:1.36
          command: ["/bin/sh","-c"]
          args:
            - |
              set -e
              mkdir -p /etc/neutron/neutron.conf.d
              if [ -f /ovn-snippet/10-ovn-connections.ini ]; then
                cp /ovn-snippet/10-ovn-connections.ini /etc/neutron/neutron.conf.d/
              fi
          volumeMounts:
            - name: neutron-ovn-conn
              mountPath: /ovn-snippet
            - name: neutron-etc
              mountPath: /etc/neutron
      containers:
        - name: neutron-server
          volumeMounts:
            - name: neutron-ovn-conn
              mountPath: /etc/neutron/neutron.conf.d/10-ovn-connections.ini
              subPath: 10-ovn-connections.ini
              readOnly: true

