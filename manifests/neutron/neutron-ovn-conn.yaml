apiVersion: v1
kind: ServiceAccount
metadata:
  name: neutron-ovn-conf-writer
  namespace: openstack
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: neutron-ovn-conf-writer
  namespace: openstack
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create","get","list","watch","update","patch"]
  - apiGroups: [""]
    resources: ["services","endpoints"]
    verbs: ["get","list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: neutron-ovn-conf-writer
  namespace: openstack
subjects:
  - kind: ServiceAccount
    name: neutron-ovn-conf-writer
    namespace: openstack
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: neutron-ovn-conf-writer
---
apiVersion: batch/v1
kind: Job
metadata:
  name: neutron-ovn-confgen
  namespace: openstack
  labels:
    app.kubernetes.io/name: neutron-ovn-confgen
  annotations:
    argocd.argoproj.io/sync-wave: "35"   # neutron is wave 40
spec:
  template:
    spec:
      serviceAccountName: neutron-ovn-conf-writer
      restartPolicy: OnFailure
      containers:
        - name: gen
          image: bitnami/kubectl:1.29
          command: ["/bin/sh","-c"]
          args:
            - |
              set -euo pipefail
              ns=openstack
              nb_svc=ovn-ovsdb-nb
              sb_svc=ovn-ovsdb-sb
              nb_ip="$(kubectl -n "$ns" get endpoints "$nb_svc" -o jsonpath='{.subsets[0].addresses[0].ip}' || true)"
              sb_ip="$(kubectl -n "$ns" get endpoints "$sb_svc" -o jsonpath='{.subsets[0].addresses[0].ip}' || true)"
              if [ -z "${nb_ip:-}" ] || [ -z "${sb_ip:-}" ]; then
                echo "Failed to resolve OVN NB/SB endpoints" >&2; exit 1
              fi
              cat > /tmp/99-ovn-conn.ini <<'EOF'
              [agent]
              extensions =
              [ml2]
              extension_drivers = port_security
              mechanism_drivers = ovn
              tenant_network_types = geneve
              type_drivers = geneve,flat,vlan
              [ml2_type_flat]
              flat_networks = physnet1
              [ml2_type_geneve]
              max_header_size = 38
              vni_ranges = 1:10000
              [ml2_type_vlan]
              network_vlan_ranges = physnet1:100:200
              [ovn]
              neutron_sync_mode = repair
              ovn_nb_connection = tcp:__NB_IP__:6641
              ovn_sb_connection = tcp:__SB_IP__:6642
              EOF
              sed -i "s/__NB_IP__/${nb_ip}/" /tmp/99-ovn-conn.ini
              sed -i "s/__SB_IP__/${sb_ip}/" /tmp/99-ovn-conn.ini
              kubectl -n "$ns" create configmap neutron-ovn-conn \
                --from-file=99-ovn-conn.ini=/tmp/99-ovn-conn.ini \
                --dry-run=client -o yaml | kubectl apply -f -

