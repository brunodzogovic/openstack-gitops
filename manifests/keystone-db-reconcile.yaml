apiVersion: batch/v1
kind: Job
metadata:
  name: keystone-db-reconcile
  namespace: openstack
  annotations:
    # Run before the keystone chart and delete itself after success
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation,HookSucceeded
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 1
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: fix
          image: mysql:8.0
          env:
            # Provided by OSH keystone chart; both exist in 'openstack' ns
            - name: ADMIN_URL
              valueFrom:
                secretKeyRef:
                  name: keystone-db-admin
                  key: DB_CONNECTION
            - name: USER_URL
              valueFrom:
                secretKeyRef:
                  name: keystone-db-user
                  key: DB_CONNECTION
          command: ["/bin/sh","-lc"]
          # Parse URLs and reset the user password via root
          args:
            - |
              set -euo pipefail
              # extract host and passwords from mysql+pymysql://user:pass@host:port/db
              host=$(printf "%s\n" "$ADMIN_URL" | sed -E 's#.*@([^:/]+).*#\1#')
              admin_pass=$(printf "%s\n" "$ADMIN_URL" | sed -E 's#^[^:]+://[^:]+:([^@]+)@.*#\1#')
              user_pass=$(printf "%s\n" "$USER_URL"  | sed -E 's#^[^:]+://[^:]+:([^@]+)@.*#\1#')

              # Ensure user exists, grant, and force the password to desired value
              mysql -h "$host" -uroot -p"$admin_pass" <<'SQL'
              CREATE DATABASE IF NOT EXISTS keystone;
              SQL
              mysql -h "$host" -uroot -p"$admin_pass" -e \
                "CREATE USER IF NOT EXISTS 'keystone'@'%' IDENTIFIED BY '${user_pass}'; \
                 GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%'; \
                 ALTER USER 'keystone'@'%' IDENTIFIED BY '${user_pass}'; \
                 FLUSH PRIVILEGES;"

